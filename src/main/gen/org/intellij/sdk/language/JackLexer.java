/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.JackTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Jack.flex</tt>
 */
class JackLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int IN_QUOTES = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\7\1\0\1\12\3\0\1\56\1\0\1\42\1\43\1\55\1"+
    "\54\1\50\1\16\1\53\1\10\1\14\11\17\1\11\1\51\1\61\1\52\1\62\2\0\1\72\11\15"+
    "\1\71\1\15\1\63\1\15\1\67\3\15\1\64\7\15\1\44\1\6\1\45\1\0\1\13\1\0\1\22\1"+
    "\37\1\20\1\34\1\32\1\35\1\66\1\33\1\36\2\13\1\21\1\31\1\25\1\24\1\70\1\13"+
    "\1\27\1\23\1\26\1\30\1\40\1\41\1\13\1\65\1\13\1\46\1\57\1\47\1\60\6\0\1\1"+
    "\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\10\16\7\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\5\11\2\34"+
    "\2\35\1\3\1\35\2\36\1\0\1\37\14\7\1\40"+
    "\4\7\1\41\4\7\10\11\1\0\1\2\2\34\2\37"+
    "\3\7\1\42\2\7\1\43\10\7\1\44\1\7\1\45"+
    "\2\7\4\11\1\46\3\11\2\7\1\47\1\7\1\50"+
    "\1\51\2\7\1\52\4\7\1\53\1\7\1\54\6\11"+
    "\1\55\4\7\1\56\1\7\1\57\1\7\1\60\5\11"+
    "\1\61\1\7\1\62\1\63\1\64\2\7\1\65\1\66"+
    "\1\67\1\70\1\11\2\7\1\71\1\11\1\7\1\72"+
    "\1\73\2\7\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\261\0\u0213\0\261\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\261\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\u01d8\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\261\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u0127\0\u07d6\0\u0811"+
    "\0\u084c\0\u01d8\0\u0127\0\u0162\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0213\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0213\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0811\0\u079b\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u0213\0\u10d3\0\u110e\0\u0213"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u0213\0\u1321\0\u0213\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u024e\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u0213"+
    "\0\u15e5\0\u0213\0\u0213\0\u1620\0\u165b\0\u0213\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u0213\0\u1782\0\u024e\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u0213\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u0213\0\u1a0b\0\u0213\0\u1a46\0\u0213\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u024e\0\u1ba8\0\u0213\0\u0213\0\u0213\0\u1be3"+
    "\0\u1c1e\0\u024e\0\u024e\0\u024e\0\u024e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u0213\0\u1d0a\0\u1d45\0\u0213\0\u024e\0\u1d80\0\u1dbb\0\u0213";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\2\6\1\7\1\6\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\13\1\22\1\13\1\23\1\24\1\25\1\13"+
    "\1\26\1\27\1\13\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\13\1\61\1\13\1\62"+
    "\1\63\1\64\1\65\1\66\1\65\1\67\1\66\1\70"+
    "\1\71\63\64\1\72\1\73\1\6\3\73\1\72\1\73"+
    "\63\72\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\40\4\1\0\21\4\1\5\1\6\1\5\2\6"+
    "\1\74\1\6\1\4\1\0\40\4\1\0\20\4\1\0"+
    "\5\6\1\0\1\6\72\0\1\4\63\0\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\75\1\0\40\4\1\0"+
    "\20\4\73\0\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\1\4\3\13\1\4\23\13\10\4\1\0"+
    "\10\4\10\13\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\1\4\3\15\1\4\23\15\10\4\1\0"+
    "\10\4\10\15\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\2\4\1\14\2\4\1\17\32\4\1\0"+
    "\22\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\2\4\1\17\2\4\1\17\32\4\1\0\22\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\13"+
    "\1\4\2\13\1\76\2\13\1\77\6\13\1\100\6\13"+
    "\10\4\1\0\10\4\10\13\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\13\1\4\13\13"+
    "\1\101\7\13\10\4\1\0\10\4\10\13\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\13"+
    "\1\4\7\13\1\102\13\13\10\4\1\0\10\4\10\13"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\13\1\4\11\13\1\103\1\13\1\104\7\13"+
    "\10\4\1\0\10\4\10\13\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\13\1\4\10\13"+
    "\1\105\3\13\1\106\6\13\10\4\1\0\10\4\10\13"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\13\1\4\13\13\1\107\7\13\10\4\1\0"+
    "\10\4\10\13\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\1\4\3\13\1\4\13\13\1\110\7\13"+
    "\10\4\1\0\10\4\10\13\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\13\1\4\2\13"+
    "\1\111\20\13\10\4\1\0\10\4\10\13\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\13"+
    "\1\4\5\13\1\112\15\13\10\4\1\0\10\4\10\13"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\13\1\4\3\13\1\113\5\13\1\114\5\13"+
    "\1\115\3\13\10\4\1\0\10\4\10\13\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\13"+
    "\1\4\6\13\1\116\7\13\1\117\4\13\10\4\1\0"+
    "\10\4\10\13\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\1\4\3\13\1\4\5\13\1\120\15\13"+
    "\10\4\1\0\10\4\10\13\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\13\1\4\3\13"+
    "\1\121\1\13\1\122\15\13\10\4\1\0\10\4\10\13"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\13\1\4\14\13\1\123\6\13\10\4\1\0"+
    "\10\4\10\13\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\1\4\3\15\1\4\3\15\1\124\7\15"+
    "\1\125\7\15\10\4\1\0\10\4\10\15\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\15"+
    "\1\4\1\15\1\126\5\15\1\127\13\15\10\4\1\0"+
    "\10\4\2\15\1\130\5\15\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\15\1\4\11\15"+
    "\1\131\11\15\10\4\1\0\10\4\10\15\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\15"+
    "\1\4\13\15\1\132\7\15\10\4\1\0\10\4\10\15"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\15\1\4\10\15\1\133\12\15\10\4\1\0"+
    "\10\4\10\15\2\64\1\0\2\64\1\0\1\134\65\64"+
    "\1\135\1\6\2\135\1\6\1\134\1\135\64\64\1\136"+
    "\1\71\1\136\1\67\1\71\1\134\1\67\66\64\1\137"+
    "\67\64\1\0\1\6\1\71\1\6\2\71\1\0\1\71"+
    "\63\0\2\75\1\0\1\4\2\140\1\141\1\140\1\75"+
    "\1\140\40\75\1\140\20\75\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\13\1\4\3\13"+
    "\1\142\17\13\10\4\1\0\10\4\10\13\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\13"+
    "\1\4\6\13\1\143\14\13\10\4\1\0\10\4\10\13"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\13\1\4\3\13\1\144\17\13\10\4\1\0"+
    "\10\4\10\13\2\4\1\0\1\4\2\0\1\74\1\0"+
    "\1\4\1\0\1\4\3\13\1\4\7\13\1\145\13\13"+
    "\10\4\1\0\10\4\10\13\2\4\1\0\1\4\2\0"+
    "\1\74\1\0\1\4\1\0\1\4\3\13\1\4\3\13"+
    "\1\146\17\13\10\4\1\0\10\4\10\13\2\4\1\0"+
    "\1\4\2\0\1\74\1\0\1\4\1\0\1\4\3\13"+
    "\1\4\2\13\1\147\20\13\10\4\1\0\10\4\10\13"+
    "\2\4\1\0\1\4\2\0\1\74\1\0\1\4\1\0"+
    "\1\4\3\13\1\4\22\13\1\150\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\11\13\1\151\11\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\17\13\1\152"+
    "\3\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\7\13\1\153\13\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\7\13\1\154\13\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\4\13\1\155\16\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\2\13\1\156"+
    "\20\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\6\13\1\157\14\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\13\13\1\160\7\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\7\13\1\161\13\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\5\13\1\162"+
    "\15\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\10\13\1\163\12\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\17\13\1\164\3\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\17\13\1\165\3\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\15\1\4\7\15\1\166"+
    "\13\15\10\4\1\0\10\4\10\15\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\12\15\1\167\10\15\10\4\1\0\10\4\10\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\10\15\1\170\12\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\10\15\1\171\12\15\10\4"+
    "\1\0\10\4\10\15\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\15\1\4\4\15\1\172"+
    "\16\15\10\4\1\0\10\4\10\15\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\7\15\1\173\13\15\10\4\1\0\10\4\10\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\23\15\10\4\1\0\10\4\2\15\1\174"+
    "\5\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\10\15\1\175\12\15\10\4"+
    "\1\0\10\4\10\15\1\64\1\136\1\6\2\136\1\6"+
    "\1\134\1\136\70\64\1\0\1\134\64\64\2\140\2\0"+
    "\71\140\2\0\3\140\1\75\63\140\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\4\13\1\176\16\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\4\13\1\177\16\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\10\13\1\200\12\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\7\13\1\201"+
    "\13\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\2\13\1\150\20\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\13\13\1\202\7\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\4\13\1\203\16\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\11\13\1\204"+
    "\11\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\14\13\1\205\6\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\13\13\1\206\7\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\4\13\1\207\16\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\1\13\1\210"+
    "\21\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\2\13\1\211\20\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\2\13\1\212\20\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\15\13\1\213\5\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\2\13\1\214"+
    "\20\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\14\15\1\215\6\15\10\4\1\0\10\4\10\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\5\15\1\216\15\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\13\15\1\217\7\15\10\4"+
    "\1\0\10\4\10\15\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\15\1\4\17\15\1\220"+
    "\3\15\10\4\1\0\10\4\10\15\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\23\15\10\4\1\0\10\4\5\15\1\221\2\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\20\15\1\222\2\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\3\15\1\223\17\15\10\4"+
    "\1\0\10\4\10\15\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\4\13\1\224"+
    "\16\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\7\13\1\225\13\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\17\13\1\226\3\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\10\13\1\227\12\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\5\13\1\230"+
    "\15\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\13\13\1\231\7\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\7\13\1\232\13\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\15\13\1\233\5\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\13\13\1\234"+
    "\7\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\13\13\1\235\7\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\10\15\1\236\12\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\13\15\1\237\7\15\10\4"+
    "\1\0\10\4\10\15\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\15\1\4\6\15\1\240"+
    "\14\15\10\4\1\0\10\4\10\15\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\11\15\1\241\11\15\10\4\1\0\10\4\10\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\5\15\1\242\15\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\23\15\10\4\1\0\10\4"+
    "\2\15\1\243\5\15\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\10\13\1\244"+
    "\12\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\1\13\1\245\21\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\6\13\1\246\14\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\15\13\1\247\5\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\17\13\1\250"+
    "\3\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\3\13\1\251\17\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\23\15\10\4\1\0\10\4\2\15\1\252"+
    "\5\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\15\1\4\6\15\1\253\14\15\10\4"+
    "\1\0\10\4\10\15\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\15\1\4\23\15\10\4"+
    "\1\0\10\4\3\15\1\254\4\15\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\7\15\1\255\13\15\10\4\1\0\10\4\10\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\3\15\1\256\17\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\11\13\1\257\11\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\5\13\1\260"+
    "\15\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\13\1\4"+
    "\6\13\1\261\14\13\10\4\1\0\10\4\10\13\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\15\1\4\10\15\1\262\12\15\10\4\1\0\10\4"+
    "\10\15\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\1\13\1\263\21\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\6\13\1\264"+
    "\14\13\10\4\1\0\10\4\10\13\2\4\1\0\1\4"+
    "\2\0\1\74\1\0\1\4\1\0\1\4\3\15\1\4"+
    "\15\15\1\265\5\15\10\4\1\0\10\4\10\15\2\4"+
    "\1\0\1\4\2\0\1\74\1\0\1\4\1\0\1\4"+
    "\3\13\1\4\7\13\1\266\13\13\10\4\1\0\10\4"+
    "\10\13\2\4\1\0\1\4\2\0\1\74\1\0\1\4"+
    "\1\0\1\4\3\13\1\4\5\13\1\267\15\13\10\4"+
    "\1\0\10\4\10\13\2\4\1\0\1\4\2\0\1\74"+
    "\1\0\1\4\1\0\1\4\3\13\1\4\10\13\1\270"+
    "\12\13\10\4\1\0\10\4\10\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\5\1\1\11\34\1\1\11\23\1\1\11\1\1"+
    "\1\0\37\1\1\0\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JackLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return JackTypes.KEY;
            } 
            // fall through
          case 61: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 63: break;
          case 4: 
            { return JackTypes.DIVIDE_OPERATOR;
            } 
            // fall through
          case 64: break;
          case 5: 
            { yybegin(WAITING_VALUE); return JackTypes.SEPARATOR;
            } 
            // fall through
          case 65: break;
          case 6: 
            { yybegin(IN_QUOTES); return JackTypes.QUOTE_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return JackTypes.IDENTIFIER;
            } 
            // fall through
          case 67: break;
          case 8: 
            { return JackTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 68: break;
          case 9: 
            { return JackTypes.CLASS_IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 10: 
            { return JackTypes.MINUS_OPERATOR;
            } 
            // fall through
          case 70: break;
          case 11: 
            { return JackTypes.OPEN_PARENTHESIS;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return JackTypes.CLOSE_PARENTHESIS;
            } 
            // fall through
          case 72: break;
          case 13: 
            { return JackTypes.OPEN_BRACKET;
            } 
            // fall through
          case 73: break;
          case 14: 
            { return JackTypes.CLOSE_BRACKET;
            } 
            // fall through
          case 74: break;
          case 15: 
            { return JackTypes.OPEN_BRACE;
            } 
            // fall through
          case 75: break;
          case 16: 
            { return JackTypes.CLOSE_BRACE;
            } 
            // fall through
          case 76: break;
          case 17: 
            { return JackTypes.LIST_SEPARATOR;
            } 
            // fall through
          case 77: break;
          case 18: 
            { return JackTypes.STATEMENT_TERMINATOR;
            } 
            // fall through
          case 78: break;
          case 19: 
            { return JackTypes.ASSIGNMENT;
            } 
            // fall through
          case 79: break;
          case 20: 
            { return JackTypes.CLASS_MEMBERSHIP;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return JackTypes.PLUS_OPERATOR;
            } 
            // fall through
          case 81: break;
          case 22: 
            { return JackTypes.TIMES_OPERATOR;
            } 
            // fall through
          case 82: break;
          case 23: 
            { return JackTypes.AND_OPERATOR;
            } 
            // fall through
          case 83: break;
          case 24: 
            { return JackTypes.OR_OPERATOR;
            } 
            // fall through
          case 84: break;
          case 25: 
            { return JackTypes.NOT_OPERATOR;
            } 
            // fall through
          case 85: break;
          case 26: 
            { return JackTypes.LESS_THAN_OPERATOR;
            } 
            // fall through
          case 86: break;
          case 27: 
            { return JackTypes.MORE_THAN_OPERATOR;
            } 
            // fall through
          case 87: break;
          case 28: 
            { yybegin(YYINITIAL); return JackTypes.VALUE;
            } 
            // fall through
          case 88: break;
          case 29: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 30: 
            { return JackTypes.STRING_LITERAL;
            } 
            // fall through
          case 90: break;
          case 31: 
            { yybegin(YYINITIAL); return JackTypes.COMMENT;
            } 
            // fall through
          case 91: break;
          case 32: 
            { return JackTypes.DO_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 33: 
            { return JackTypes.IF_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 34: 
            { return JackTypes.LET_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 35: 
            { return JackTypes.NEW_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 36: 
            { return JackTypes.INT_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 37: 
            { return JackTypes.VAR_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 38: 
            { return JackTypes.SYS_CLASS;
            } 
            // fall through
          case 98: break;
          case 39: 
            { return JackTypes.CHAR_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 40: 
            { return JackTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 41: 
            { return JackTypes.THIS_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 42: 
            { return JackTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 43: 
            { return JackTypes.VOID_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return JackTypes.MATH_CLASS;
            } 
            // fall through
          case 104: break;
          case 45: 
            { return JackTypes.CLASS;
            } 
            // fall through
          case 105: break;
          case 46: 
            { return JackTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 47: 
            { return JackTypes.FIELD_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 48: 
            { return JackTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 49: 
            { return JackTypes.ARRAY_CLASS;
            } 
            // fall through
          case 109: break;
          case 50: 
            { return JackTypes.STATIC_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 51: 
            { return JackTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 52: 
            { return JackTypes.METHOD_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 53: 
            { return JackTypes.MEMORY_CLASS;
            } 
            // fall through
          case 113: break;
          case 54: 
            { return JackTypes.SCREEN_CLASS;
            } 
            // fall through
          case 114: break;
          case 55: 
            { return JackTypes.STRING_CLASS;
            } 
            // fall through
          case 115: break;
          case 56: 
            { return JackTypes.OUTPUT_CLASS;
            } 
            // fall through
          case 116: break;
          case 57: 
            { return JackTypes.BOOLEAN_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 58: 
            { return JackTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 59: 
            { return JackTypes.KEYBOARD_CLASS;
            } 
            // fall through
          case 119: break;
          case 60: 
            { return JackTypes.CONSTRUCTOR_KEYWORD;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
